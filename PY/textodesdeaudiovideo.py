# -*- coding: utf-8 -*-
"""TextoDesdeAudioVideo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11Q2bmiiC59-ZDu2o6TllPQUcurNhLWJ4
"""

!pip install git+https://github.com/openai/whisper.git
!sudo apt update && sudo apt install ffmpeg
!pip install pydub librosa soundfile whisper moviepy

"""# Suite de Procesamiento de Audio y Video en Google Colab

Este script de Python para Google Colab ofrece una suite completa de herramientas para el procesamiento de audio y video, así como transcripción de audio. Las funcionalidades incluyen:

1. División de archivos de audio (mp3, wav, ogg) en segmentos de duración específica.
2. Mejora de la calidad del audio mediante normalización y realce de frecuencias.
3. Transcripción de audio utilizando varios modelos de Whisper de OpenAI.
4. Conversión de archivos de video a diferentes formatos de audio.

El script opera con archivos ubicados en el directorio '/content/' de Google Colab, facilitando la gestión de archivos. Todas las operaciones se realizan a través de un menú interactivo, permitiendo al usuario seleccionar archivos, especificar parámetros y elegir opciones de procesamiento según sea necesario. Los archivos procesados se guardan automáticamente en el mismo directorio con nombres descriptivos.

Características destacadas:
- Soporta múltiples formatos de entrada para audio y video.
- Permite seleccionar entre diferentes modelos de Whisper para la transcripción.
- Ofrece opciones de conversión de video a varios formatos de audio (mp3, wav, ogg).
- Divide archivos de audio en varios formatos soportados.

Instrucciones de uso:
1. Ejecute el script en un notebook de Google Colab.
2. Suba sus archivos de audio o video al directorio '/content/'.
3. Siga las instrucciones del menú para procesar sus archivos.

Nota: Asegúrese de tener una conexión estable a internet para la instalación de dependencias y el uso de los modelos de Whisper.
"""

# Instalación de las bibliotecas necesarias
# !pip install pydub librosa soundfile whisper moviepy

import os
from google.colab import files
from pydub import AudioSegment
import librosa
import soundfile as sf
import whisper
from moviepy.editor import VideoFileClip

# Función para listar archivos de audio y video en /content/
def list_media_files():
    media_files = [f for f in os.listdir('/content/') if f.endswith(('.mp3', '.wav', '.ogg', '.mp4', '.avi', '.mov', '.mkv'))]
    return media_files

# Función para dividir el archivo de audio
def split_audio(input_file, split_time):
    audio = AudioSegment.from_file(input_file)
    duration = len(audio)
    split_ms = int(split_time * 60 * 1000)  # Convertir minutos a milisegundos y a entero

    base_name, extension = os.path.splitext(os.path.basename(input_file))

    for i, start in enumerate(range(0, duration, split_ms)):
        end = start + split_ms
        if end > duration:
            end = duration
        chunk = audio[start:end]
        output_file = f"/content/{base_name}_part_{i+1}{extension}"
        chunk.export(output_file, format=extension[1:])
        print(f"Parte {i+1} guardada: {output_file}")

# Función para mejorar la calidad del audio
def enhance_audio(input_file):
    # Cargar el archivo de audio
    y, sr = librosa.load(input_file)

    # Aplicar normalización
    y_normalized = librosa.util.normalize(y)

    # Aplicar un filtro de realce de frecuencias
    y_enhanced = librosa.effects.preemphasis(y_normalized)

    # Generar el nombre del archivo de salida
    base_name = os.path.splitext(os.path.basename(input_file))[0]
    output_file = f"/content/{base_name}_enhanced.wav"

    # Guardar el audio mejorado
    sf.write(output_file, y_enhanced, sr)
    print(f"Audio mejorado guardado: {output_file}")

# Función para transcribir audio con Whisper
def transcribe_audio(input_file, model_name):
    model = whisper.load_model(model_name)
    result = model.transcribe(input_file, language='es')  # Agregar el parámetro language='es' para español

    base_name = os.path.splitext(os.path.basename(input_file))[0]
    output_file = f"/content/{base_name}_transcription.txt"

    with open(output_file, "w", encoding="utf-8") as f:
        f.write(result["text"])

    print(f"Transcripción guardada: {output_file}")

# Función para convertir video a audio
def convert_video_to_audio(input_file, output_format):
    video = VideoFileClip(input_file)
    base_name = os.path.splitext(os.path.basename(input_file))[0]
    output_file = f"/content/{base_name}.{output_format}"

    if output_format == 'mp3':
        video.audio.write_audiofile(output_file)
    elif output_format == 'wav':
        video.audio.write_audiofile(output_file, codec='pcm_s16le')
    elif output_format == 'ogg':
        video.audio.write_audiofile(output_file, codec='libvorbis')

    video.close()
    print(f"Audio extraído y guardado como: {output_file}")

# Interfaz para dividir audio
def split_audio_interface():
    audio_files = [f for f in list_media_files() if f.endswith(('.mp3', '.wav', '.ogg'))]
    if not audio_files:
        print("No se encontraron archivos de audio en /content/")
        return

    print("Archivos de audio disponibles:")
    for i, file in enumerate(audio_files):
        print(f"{i+1}. {file}")

    file_index = int(input("Seleccione el número del archivo a dividir: ")) - 1
    if file_index < 0 or file_index >= len(audio_files):
        print("Selección no válida")
        return

    input_file = f"/content/{audio_files[file_index]}"
    split_time = float(input("Ingrese el tiempo de división en minutos: "))

    split_audio(input_file, split_time)

# Interfaz para mejorar audio
def enhance_audio_interface():
    audio_files = [f for f in list_media_files() if f.endswith(('.mp3', '.wav', '.ogg'))]
    if not audio_files:
        print("No se encontraron archivos de audio en /content/")
        return

    print("Archivos de audio disponibles:")
    for i, file in enumerate(audio_files):
        print(f"{i+1}. {file}")

    file_index = int(input("Seleccione el número del archivo a mejorar: ")) - 1
    if file_index < 0 or file_index >= len(audio_files):
        print("Selección no válida")
        return

    input_file = f"/content/{audio_files[file_index]}"
    enhance_audio(input_file)

# Interfaz para transcribir audio
def transcribe_audio_interface():
    audio_files = [f for f in list_media_files() if f.endswith(('.mp3', '.wav', '.ogg'))]
    if not audio_files:
        print("No se encontraron archivos de audio en /content/")
        return

    print("Archivos de audio disponibles:")
    for i, file in enumerate(audio_files):
        print(f"{i+1}. {file}")

    file_index = int(input("Seleccione el número del archivo a transcribir: ")) - 1
    if file_index < 0 or file_index >= len(audio_files):
        print("Selección no válida")
        return

    input_file = f"/content/{audio_files[file_index]}"

    print("\nModelos de Whisper disponibles:")
    print("1. tiny")
    print("2. base")
    print("3. small")
    print("4. medium")
    print("5. large")

    model_choice = input("Seleccione el número del modelo a utilizar: ")
    model_names = ["tiny", "base", "small", "medium", "large"]
    model_name = model_names[int(model_choice) - 1]

    transcribe_audio(input_file, model_name)

# Interfaz para convertir video a audio
def convert_video_to_audio_interface():
    video_files = [f for f in list_media_files() if f.endswith(('.mp4', '.avi', '.mov', '.mkv'))]
    if not video_files:
        print("No se encontraron archivos de video en /content/")
        return

    print("Archivos de video disponibles:")
    for i, file in enumerate(video_files):
        print(f"{i+1}. {file}")

    file_index = int(input("Seleccione el número del archivo a convertir: ")) - 1
    if file_index < 0 or file_index >= len(video_files):
        print("Selección no válida")
        return

    input_file = f"/content/{video_files[file_index]}"

    print("\nFormatos de audio disponibles:")
    print("1. mp3")
    print("2. wav")
    print("3. ogg")

    format_choice = input("Seleccione el número del formato de salida: ")
    output_formats = ["mp3", "wav", "ogg"]
    output_format = output_formats[int(format_choice) - 1]

    convert_video_to_audio(input_file, output_format)

# Menú principal
while True:
    print("\n1. Dividir archivo de audio")
    print("2. Mejorar calidad de audio")
    print("3. Transcribir audio")
    print("4. Convertir video a audio")
    print("5. Salir")
    choice = input("Seleccione una opción (1/2/3/4/5): ")

    if choice == '1':
        split_audio_interface()
    elif choice == '2':
        enhance_audio_interface()
    elif choice == '3':
        transcribe_audio_interface()
    elif choice == '4':
        convert_video_to_audio_interface()
    elif choice == '5':
        break
    else:
        print("Opción no válida. Por favor, intente de nuevo.")

print("Gracias por usar la Suite de Procesamiento de Audio y Video. ¡Hasta la próxima!")

!whisper "/content/Biografia en Ingles.mp4" --model large --language English

!whisper "/content/COMISIÓN SECCIONAL INTERINSTITUCIONAL-20240620_101246-Grabación de la reunión.mp3" --model large --language Spanish

!whisper "/content/Grabación Dialogo - Teletrabajo.mp3" --model medium --language Spanish